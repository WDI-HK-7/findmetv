app.controller('SeriesVoteCtrl', ['$scope', '$http', '$location', '$routeParams', function($scope, $http, $location, $routeParams){

  $('.showResult').hide();
  $scope.series = [];
  var counter = 0;
  var like = [];
  var dislike = [];
  var recommendation = {};
  var newPlaceholder = ["Add 3 TV shows you like", "Add 2 more", "Add a last one", "Now add 2 TV shows you didn't enjoy", "Add another one to get results"];
  $scope.placeholder = newPlaceholder[counter];

  $scope.getseries = function() {

    // var getTitle = $scope.seriesTitle).replace(" ","%20");
      
    $http.get("<%= ENV['URL'] %>" + 'findByName/' + $scope.seriesTitle.replace(" ","%20")).success(function(response) {
      // console.log(response);
      $scope.series.push(response[0]);

      if (counter < 3) {
        like.push(response[0].id);
      } else {
        dislike.push(response[0].id);
      }

      counter += 1;
      // console.log(like);
      // console.log(dislike);
      $scope.seriesTitle = null;
      $scope.placeholder = newPlaceholder[counter];

      if (counter == 5) {

        $('.hideResult').hide();
        $('.showResult').show();

        for (var o = 0; o < like.length; o++) {
          $http.get("<%= ENV['URL'] %>" + "series/" + like[o]).success(function(response){
            console.log(response);
            var currentLikes = response.like;
            var newLikes = currentLikes + 1;
            var data = {
              serie: {
                like: newLikes
              }
            }

            $http.patch("<%= ENV['URL'] %>" + "series/" + like[o], data).success(function(response) {
            })
          })
        }
        
        for (var p = 0; p < like.length; p++) {
          $http.get("<%= ENV['URL'] %>" + "series/" + dislike[p]).success(function(response){
            console.log(response);
            var currentDislikes = response.dislike;
            var newDislikes = currentDislikes + 1;
            var data = {
              serie: {
                like: newDislikes
              }
            }

            $http.patch("<%= ENV['URL'] %>" + "series/" + dislike[p], data).success(function(response) {
            })
          })
        }

        var data = {
          vote: {
            likes: like,
            dislikes: dislike
          }
        };

        $http.post("<%= ENV['URL'] %>" + "votes", data).success(function(response) {
          console.log(response);
        });

        $http.get("<%= ENV['URL'] %>" + "votes").success(function(response) {
          for (var i = 0; i < response.length; i++) {
            // console.log("It's calling this");
            containsAll(like[0], like[1], response[i].likes);
            containsAll(like[0], like[2], response[i].likes);
            containsAll(like[1], like[2], response[i].likes);
          }

          var like0 = like[0];
          var like1 = like[1];
          var like2 = like[2];
          var dislike0 = dislike[0];
          var dislike1 = dislike[1];

          delete recommendation[like0];
          delete recommendation[like1];
          delete recommendation[like2];
          delete recommendation[dislike0];
          delete recommendation[dislike1];
          
          console.log(recommendation);

          var recomValue = $.map(recommendation, function(value, index) {
            return [value];
          });
          // console.log(recomValue);

          var recomKey = $.map(recommendation, function(index, key) {
            return [key];
          });
          // console.log(recomKey);
          
          var firstValue = 0;
          var secondValue = 0;
          var thirdValue = 0;
          var first = 0;
          var second = 0;
          var third = 0;

          for (var n = 0; n < recomValue.length; n++) {

            if (recomValue[n] >= firstValue) {
              thirdValue = secondValue;
              secondValue = firstValue;
              firstValue = recomValue[n];
              third = second;
              second = first;
              first = recomKey[n];
            } else if ((firstValue >= recomValue[n]) && (recomValue[n] >= secondValue)) {
              thirdValue = secondValue;
              secondValue = recomValue[n];
              third = second;
              second = recomKey[n];
            } else if ((secondValue >= recomValue[n]) && (recomValue[n] >= thirdValue)) {
              thirdValue = recomValue[n];
              third = recomKey[n];
            }
          }

          // console.log(first);
          // console.log(second);
          // console.log(third);

          $http.get("<%= ENV['URL'] %>" + "series/" + first).success(function(response) {
            // console.log(response);
            $scope.first = response;
          });

          $http.get("<%= ENV['URL'] %>" + "series/" + second).success(function(response) {
            // console.log(response);
            $scope.second = response;
          });

          $http.get("<%= ENV['URL'] %>" + "series/" + third).success(function(response) {
            // console.log(response);
            $scope.third = response;
          });
         

        });

      }
    });

  }

  function containsAll(needles, moreNeedles, haystack){
    // console.log("It's also calling this");
    if((haystack.indexOf(needles) > -1) && (haystack.indexOf(moreNeedles) > -1)) {
      // console.log('needles == ' + needles);
      // console.log('moreNeedles == ' + moreNeedles);
      // console.log('haystack == ' + haystack.length);
      // console.log('recomendation == ' + recommendation.length);

      for (var j = 0; j < haystack.length; j++) {
        
        if (recommendation[haystack[j]] == null) {
          recommendation[haystack[j]] = 1;
        } else {
          recommendation[haystack[j]] += 1;
        }

      }
    }

  }
  
  $(function() {
    $( "#slider-range" ).slider({
      range: true,
      min: 10,
      max: 100,
      values: [ 20, 90 ],
      slide: function( event, ui ) {
        $( "#amount" ).val( "min" + ui.values[ 0 ] + " - min" + ui.values[ 1 ] );
      }
    });
    $( "#amount" ).val($( "#slider-range" ).slider( "values", 0 ) + "min" +
      " - " + $( "#slider-range" ).slider( "values", 1 ) + "min" );
  });
  
}]);